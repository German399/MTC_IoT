#ifndef BOARD_DRIVERS_H_INCLUDED
#define BOARD_DRIVERS_H_INCLUDED

/**
    @ingroup fw_code
    @defgroup board_support Код поддержки платформы
    @{
*/

 /**
    @file board_support_api.h
    @author RedBees, LLC
    @copyright This file is distributed under the terms of the MIT license.
 */

#include "stm32l1xx.h"
#include "board_pins.h"
#include "port_macros.h"
#include "uart_api.h"
#include "i2c_api.h"
#include "stdio.h"
#include "tmp75_driver.h"
#include "lis3dh_driver.h"
#include "at_cmd_support.h"
#include "awu_api.h"
#include "coap_essentials.h"
#include "gnss_support.h"
#include "string.h"
#include "stdlib.h"
#include "ds1721_driver.h"

#define FIRMWARE_VERSION            "2.7 alpha, 08.08.2021"

#define MTS_COAP_SERVER_IP          "213.87.45.120"
#define MTS_COAP_SERVER_PORT        5683

///Значение тактовой частоты, на которой работает контроллер
#define DEFAULT_CLOCK_FREQ      16000000UL
///Значение скорости обмена для консоли (вывод printf() через USART1 и встроенный в плату USB-UART конвертер)
#define CONSOLE_BAUDRATE        115200UL
///По умолчанию модули EVA M8 выдают данные на скорости 9600 бит/с
#define GNSS_BAUDRATE           9600UL
/**
Значение 1 включает обратную отсылку принятых символов; обратная отсылка принятых символов снижает скорость обработки ввода и может вызвать проблемы (пропуск символов)
при достаточно высокой скорости поступления данных
*/
#define ECHO_INPUT_CHARS            0
///Скорость обмена с радиомодулем
#define SARA_R410M_DEFAULT_BAUDRATE 115200UL

///Адрес термодатчика TMP75, установленного на плате
#define LOCAL_TSENSOR_I2C_ADDR      0x48
///Адрес акселерометра LIS3DH, установленного на плате
#define LOCAL_ACCEL_I2C_ADDR        0x18

/**
    Плата может быть укомплектована термодатчиком TMP75 либо DS1721. Процедуры работы с ними похожи, но не совместимы на 100%.
    Если макрос имеет значение 1, прошивка будет скомпилирована с поддержкой DS1721; иначе будет использован драйвер для TMP75.
*/
#define USE_DS1721              1

#define MCU_UNIQUE_IDENTIFIER_ADDRESS       ((uint32_t *)0x1FF800CC)

//Отладочная опция: настроить вывод сигнала тактирования на PA8 (D7 на Arduino-совместимом разъеме).
//#define CONFIGURE_CLOCK_OUT

//Выводить на PA8 сигнал от генератора LSE
//#define OBSERVE_LSE
//Выводить на PA8 текущий основной тактовый сигнал контроллера
//#define OBSERVE_SYSCLK

///Максимальное количество тактов ожидания запуска тактовых генераторов. Если запуск займет больше времени, будет принято решение о том, что
///генератор отказал.
#define OSC_STARTUP_CYCLES_MAX      2000000UL

/**
    Предделитель для таймера, сконфигурированного для отсчета времени работы системы и опроса кнопки.
    Значение по-умолчанию соответствует тактированию таймера на частоте 1 МГц при системной частоте 16 МГц (HSI).
*/
#define TMR_PRESC                   15
///Количество отсчетов таймера за 1 мс.
#define TMR_CNT_1MSEC               1000
///Интервал опроса кнопки, выраженный в отсчетах таймера.
#define BTN_POLL_PERIOD             50000

///См. описание @link device_setup_data_t @endlink
#define LOGGER_MODE_VALUE           15

///См. описание поля reserved структуры @link device_setup_data_t @endlink
#define SETTINGS_SIGNATURE_0        0xA5
///См. описание поля reserved структуры @link device_setup_data_t @endlink
#define SETTINGS_SIGNATURE_1        0x55
///См. описание поля reserved структуры @link device_setup_data_t @endlink
#define SETTINGS_SIGNATURE_2        0xAA

/**
    Значения, определенные для хранения в поле bit_options структуры настроек @link device_setup_data_t @endlink
*/
///Запускать прошивку в режиме меню версии 2
#define OPTION_START_WITH_MENU_V2   (1<<0)

/** @brief Структура, хранящая настройки работы основного демонстрационного приложения
    @warning Структура сохраняется в области EEPROM. По причине особенностей записи в эту область, размер структуры должен быть кратен четырем байтам.
*/
typedef struct {
    ///IP/IPv6-адрес сервера для передачи телеметрии через IP/IPv6
    uint8_t target_server_IP[48];
    ///URL на сервере для передачи телеметрии через IP
    uint8_t target_URL[128];
    ///Имя APN для NIDD
    uint8_t NIDD_APN_name[64];
    //60 32-bit words up to here
    ///Интервал передачи телеметрии в миллисекундах
    uint32_t telemetry_interval_ms;
    ///Номер порта на сервере для передачи телеметрии через IP
    uint16_t target_server_port;
    ///Флаг использования технологии NIDD. Если записана единица, передача будет выполняться через NIDD, иначе через IP
    uint8_t use_NIDD;
    /**
        Если переменная имеет значение @link LOGGER_MODE_VALUE @endlink, то после загрузки плата будет переходить в режим периодической передачи телеметрии. При любом другом значении
        плата будет запускаться в режиме меню настроек.

        @note Конкретное значение переменной выбрано для того, чтобы в случае, когда структура в EEPROM не инициализирована или повреждена, плата
        с максимальной вероятностью стартовала в режиме меню.
    */
    uint8_t logger_mode_on_startup;
    ///Если переменная отлична от нуля, в пакет телеметрии не будут включаться истинные данные, принятые с GNSS-модуля (настройка не затрагивает тестовый вывод данных в консоль).
    uint8_t gnss_privacy_mode;
    /**
        Битовое поле, предназначенное для хранения разнообразных опций, имеющих логическое (т.е. не числовое) значение.
    */
    uint32_t bit_options;
    /**
        Выравнивание структуры по границе слова, а также значение, сигнализирующее о наличии корректных данных в EEPROM. При начальной инициализации
        в этот массив записываются значения SETTINGS_SIGNATURE_[0..2]. Если значение этого поля не равно последовательности указанных значений,
        выполняется автоматический вход в процедуру заводской настройки.
    */
    uint8_t reserved[3];
} device_setup_data_t;

///В случае, если генератор LSE запустить не удалось, значение этой переменной будет ненулевым.
extern volatile uint8_t LSE_failed;
///Калиброванное значение: количество итераций пустого цикла за 1 секунду при текущей тактовой частоте. Калибровка значения выполняется при старте платы.
extern volatile uint32_t CYCLES_PER_1SEC;

/**
    @brief Функция выполняет настройку тактирования и инициализацию периферии, используемой демонстрационным приложением.

    USART2 используется для реализации консоли с поддержкой printf (перемычки XP4 и XP5 должны стоять в положении 1-2)
    I2C1 используется для чтения датчика температуры и акселерометра
    Вывод PA5 подключен к пользовательскому светодиоду, расположенному на плате (перемычка XP8 должна стоять в положении 2-3)
    USART3 используется для коммуникации с NB-IoT модулем.

*/
void init_board(void);

/**
    @brief Возвращает время с момента начала работы прошивки

    @return Время с момента начала работы прошивки, в миллисекундах.
*/
uint32_t get_uptime_ms(void);

///Приостанавливает выполнение программы на заданное время. Значение задержки задается в миллисекундах.
void delay_ms(uint32_t N);

/**
    @brief Возвращает время удержания кнопки нажатой с момента предыдущего вызова функции.

    Все время работы прошивки происходит опрос кнопки по таймеру с интервалом BTN_POLL_PERIOD. Если кнопка нажата, каждый интервал
    опроса происходит инкремент счетчика. Когда кнопку отпускают, значение счетчика сохраняется. Таким образом, можно определить, была ли кнопка
    нажата, и насколько долго.

    @warning После того, как кнопка была отпущена, и до вызова get_button_press(), система не реагирует на нажатия кнопки.

    @return Время, которое кнопка была нажата, в единицах BTN_POLL_PERIOD. Если кнопка не была нажата с момента предыдущего вызова функции, возвращается ноль.
*/
uint32_t get_button_press(void);

/**
    @brief Включает или выключает светодиод на плате.

    @param [in] state 1 - включить светодиод, 0 - выключить светодиод.
*/
void switch_LED(uint8_t state);

///Генерирует импульс низкого уровня продолжительностью примерно 500 мс на линии PWR_ON радиомодуля.
void SARA_R410_PWR_ON_pulse(void);

#define EEPROM_START_ADDRESS            ((uint32_t *)0x08080000)

/**
    @brief Запись в EEPROM

    @param [in] eeprom_ptr Указатель на адрес в EEPROM, с которого следует начать запись
    @param [in] data_ptr Указатель на массив данных в виде тридцатидвухбитных слов
    @param [in] data_size_words Размер массива данных в тридцатидвухбитных словах

    @warning Данные должны быть выровнены по границе слова.
*/
void FLASH_WriteEEPROM(volatile uint32_t *eeprom_ptr,uint32_t *data_ptr,uint16_t data_size_words);

/**
    @brief Сохранение настроек устройства в область EEPROM

    @param [in] data - указатель на структуру типа @link device_setup_data_t @endlink, данные из которой будут записаны в EEPROM
*/
void store_device_settings(device_setup_data_t *data);

/**
    @brief Загрузка настроек устройства из области EEPROM

    @param [in] data - указатель на структуру, в которую будут скопированы данные из EERPOM
*/
void recall_device_settings(device_setup_data_t *data);

/**
    @brief Модифицирует строку с учетом символов backspace

    Реализация scanf() в newlib не обрабатывает символы backspace. Вводимые символы возврата просто записываются в строку
    вместе с предыдущими символами; apply_backspace() выполняет замену согласно введенным символам возврата.

    @param [in] str Строка, котороую необходимо скорректировать; замена выполняется на месте
    @param [in] max_length Максимальная длина строки (размер буфера)
*/
void apply_backspace(uint8_t *str,uint16_t max_length);

/**
    @}
*/

#endif /* BOARD_DRIVERS_H_INCLUDED */
