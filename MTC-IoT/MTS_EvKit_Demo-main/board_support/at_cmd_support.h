#ifndef AT_CMD_SUPPORT_H_INCLUDED
#define AT_CMD_SUPPORT_H_INCLUDED

#include "stm32l1xx.h"
#include "uart_api.h"
#include "stdio.h"
#include "string.h"

/**
    @ingroup device_drivers
    @defgroup at_cmd_support Код поддержки приема и передачи AT-команд
    @{
*/

 /**
    @file at_cmd_support.h
    @author RedBees, LLC
    @copyright This file is distributed under the terms of the MIT license.
 */

///Максимальная длина буфера (в байтах), в который будет осуществляться прием ответов от радиомодуля.
///Согласно документации, максимальная длина команды для SARA-R410-02B ограничена значением 1024 символа.
///По этой причине размер приемного буфера целесообразно ограничить этим же значением.
#define AT_RESP_BUFFER_LENGTH       1024

//Отключение отслеживания конца ответа.
//Формат ответа модуля следующий: <команда> CR CR LF <ответ> [OK | ERROR] CR LF
//Конечный автомат, принимающий данные, по-умолчанию выполняет поиск последовательности "OK" или "ERROR" во входных данных;
//это считается концом приема ответа. Определение DEBUG_NO_RESP_END_SEARCH отключает этот механизм. В таком случае
//AT_ReadResponseBuffer() следует вызывать только тогда, когда точно известно, что ответ получен.
//#define DEBUG_NO_RESP_END_SEARCH

#ifndef NULL
#define NULL ((void *)0)
#endif

///См. AT_CreateUDPSocket()
#define INVALID_SOCKET_ID       255

typedef enum {
    /** Модуль не ответил на запрос */
    AT_NO_RESPONSE,
    /** Запрос к модулю завершился с ошибкой */
    AT_ERROR,
    /** Произошла ошибка в процессе разбора строки-ответа; скорее всего, строка повреждена */
    AT_FORMAT_ERROR,
    /** При чтении из UDP-сокета: длина строки, сообщенная командой чтения, не совпадает с запрошенной длиной; вероятно, произошла ошибка разбора строки */
    AT_LENGTH_DOES_NOT_MATCH,
    /** Ошибок не произошло, данные корректны */
    AT_NO_ERROR
} at_udp_error_t;

///1 - использовать продвинутый поиск URC в потоке символов от радиомодуля. Опция необходима для поддержки обратного канала NIDD.
///Если опция отключена, будет использован старый способ, поддерживающий только работу с URC, относящимися к UDP.
#define USE_ADVANCED_URC_SEARCH         1

///Количество URC, поиск которых будет производиться
#define NUM_URC_SUPPORTED               2

///Максимальная длина имени URC
#define URC_NAME_LENGTH                 16
///Структура, описывающая URC-сообщение, поиск которого будет производиться во входном потоке символов от радиомодуля
typedef struct {

    /** Строковое имя URC, по которому будет производиться его поиск */
    uint8_t URC_string_name[URC_NAME_LENGTH];
    /** Счетчик совпадения символов, используемый конечным автоматом поиска URC */
    uint8_t match_counter;
    /** Флаг, ненулевое значение которого означает, что принят заголовок URC (и далее необходимо принимать данные URC) */
    uint8_t URC_header_detected;
    /** Флаг, ненулевое значение которого означает, что URC принят целиком, и можно приступать к его обработке */
    uint8_t URC_detected;

} expected_URC_entry_t;

/**
    @brief Чтение ответа модуля.

    Прием ответа от модуля производится асинхронно, в прерывании. Принятые данные сохраняются в буфер.
    Функция выполняет безопасное чтение этого буфера методом, исключающим повреждение данных в результате конфликта
    записи-чтения. Опционально можно задать время ожидания ответа модуля.

    @param [out] buffer_out указатель на буфер, в который будет произведено копирование принятых данных.
    @param [in] buffer_length Длина буфера, в который будет производиться копирование
    @warning Если размер ответа превосходит размер буфера, лишние данные будут отброшены
    @param [out] is_overflowed ненулевое значение свидетельствует о том, что размер принятых данных превышал RESP_BUFFER_LENGTH и данные были повреждены. Если
    информация об этом не требуется, вместо этого параметра можно передать NULL.
    @param [out] overrun_detected ненулевое значение свидетельствует о том, что в процессе копирования данных из буфера было зарегистрировано поступление новых
    данных, которые были отброшены в целях сохранения целостности копируемых данных. Если информация об этом не требуется, вместо этого параметра можно передать
    NULL.
    @param [out] error_status Устанавливается в 1, если ответ модуля указывает на ошибку; если команда выполнена успешно - 0. Если информация не требуется, вместо
    этого параметра можно передать NULL.
    @param [in] max_wait_time предельное время ожидания ответа от модуля (в тактах). Если ответ не был получен за это время, функция завершается, возвращая ноль.
    @return количество байт данных.
*/
uint16_t AT_ReadReponseBuffer(uint8_t* buffer_out,uint16_t buffer_length,uint8_t* is_overflowed,uint8_t* overrun_detected,uint8_t *error_status,uint32_t max_wait_time);

/**
    @brief Посылает AT-команду в модуль.

    @warning AT-команда должна представлять собой NULL-терминированную строку (соглашение C).
*/
void AT_SendCommand(const uint8_t *cmd);

/**
    @brief Создает UDP-сокет средствами радиомодуля.

    @param [in] max_wait_time Предельное время ожидания ответа модуля, в тактах.
    @return Идентификатор созданного сокета. Если сокет создать не удалось, возвращаемый идентификатор будет установлен в значение INVALID_SOCKET_ID.
*/
uint8_t AT_CreateUDPSocket(uint32_t max_wait_time);

/**
    @brief Закрывает ранее созданный сокет UDP.

    @param [in] socket_id Идентификатор сокета
    @param [in] max_wait_time Предельное время ожидания ответа от радиомодуля

    @return В случае успеха - 1, в случае ошибки или таймаута - 0
*/
uint8_t AT_CloseUDPSocket(uint8_t socket_id,uint32_t max_wait_time);

/**
    @brief Посылает пакет UDP по указанному адресу.

    @param [in] socket_id Идентификатор сокета, который будет использоваться для отсылки данных
    @param [in] target_IP_string IP-адрес целевого сервера в виде строки, например "127.0.0.1"
    @param [in] target_port Порт сервера, на который требуется отправить данные
    @param [in] data Указатель на массив байт данных
    @param [in] data_length Длина массива данных
    @param [in] max_wait_time Предельное время ожидания ответа модуля
    @return Информация об ошибке, определенная в at_udp_error_t
*/
at_udp_error_t AT_SendUDPData(uint8_t socket_id,uint8_t *target_IP_string,uint16_t target_port,uint8_t *data,uint16_t data_length,uint32_t max_wait_time);
/**
    @brief Получение мощности принимаемого сигнала в dBm

    @param [in] timeout Предельное время ожидания ответа модуля
    @return Мощность принимаемого сигнала в dBm.

    @warning Смысл имеют только значения от -111 dBm до -51 dBm. Значение, выходящее за этот диапазон, свидетельствует об ошибке определения.
    Граничные значения возвращаются также для значений, лежащих за пределами диапазона. То есть, -51 dBm означает "-51 dBm или более", -111 dBm означает
    "-111 dBm или менее".
*/
int16_t AT_GetRSSI(uint32_t timeout);
/**
    @brief Позволяет проверить, есть ли в буфере радиомодуля входящий UDP-пакет.

    @param [out] socket_id Указатель на переменную, в которую будет записан идентификатор сокета, принявшего данные; если значение не требуется, можно передать NULL
    @param [out] packet_length Указатель на переменную, в которую будет записан размер принятых данных в байтах; если значение не требуется, можно передать NULL
    @return Если в буфере радиомодуля нет данных, либо если проверка завершилась с ошибкой, функция возвращает 0; если данные есть - 1
*/
uint8_t AT_CheckUDPReceived(uint8_t *socket_id,uint16_t *packet_length);
/**
    @brief Чтение данных из указанного UDP-сокета

    @param [in] socket_id Идентификатор сокета, из которого требуется прочесть данные
    @param [in] read_length Количество данных, которое требуется прочесть
    @param [out] source_IP Указатель на строку, в которую будет записан адрес сервера-источника данных; если эта информация не требуется, может быть передан NULL
    @param [out] source_port Указатель на переменную, в которую будет записан номер порта, с которого пришли данные; если информация не требуется, может быть передан NULL
    @param [out] data_out Указатель на массив, в который будут записаны данные; размер массива должен составлять не менее read_length байт. Если данные не требуются, может быть передан NULL
    @param [in] max_wait_time Предельное время ожидания ответа модуля в тактах
    @return Код ошибки, определенный в at_udp_error_t
*/
at_udp_error_t AT_ReadUDPData(uint8_t socket_id,uint16_t read_length,uint8_t *source_IP,uint16_t *source_port,uint8_t *data_out,uint32_t max_wait_time);

/**
    @brief Проверка наличия NIDD-данных и, при их наличии, чтение принятой строки

    @param [out] data_out Указатель на буфер, в который будут записаны данные
    @warning Буфер должен иметь размер не менее чем 513 байт (максимум 512 байт данных и завершающий строку нулевой байт)
    @return Количество принятых байт данных без учета завершающего строку нулевого байта

    @note Чтобы эта функция была доступна, код должен быть скомпилирован с поддержкой улучшенного метода поиска URC во входном потоке,
    @note см. \link USE_ADVANCED_URC_SEARCH \endlink. В противном случае тело функции заменяется заглушкой, всегда возвращающей ноль.
*/
uint16_t AT_CheckNIDDReceived(uint8_t *data_out);

/**
    @brief Чтение ICCID SIM-карты/чипа

    @param [in] ICCID Буфер, в который будет скопирован ICCID **в виде строки**. Должен иметь размер не менее 50 символов.
    @param [in] timeout Предельное время ожидания ответа от модуля, в тактах
    @return При успехе - 1, при ошибке запроса - 0
*/
uint8_t AT_ReadICCID(uint8_t *ICCID,uint32_t timeout);

/**
    @brief Чтение IMEI радиомодуля

    @param [in] IMEI Буфер, в который будет скопирован IMEI **в виде строки**. Должен иметь размер не менее 50 символов.
    @return При успехе - 1, при ошибке запроса - 0
*/
uint8_t AT_ReadIMEI(uint8_t *IMEI,uint32_t timeout);

/**
    @brief Пересылает данные с помощью технологии NIDD

    @warning Профиль радиомодуля должен быть настроен соответствующим образом

    @param [in] str Строка, которая будет отправлена
    @warning Максимальный размер строки - 450 символов
    @param [in] timeout Предельное время ожидания ответа радиомодуля
    @return В случае успеха - 1, в случае ошибки передачи - 0.
*/
uint8_t AT_SendStringUsingNIDD(uint8_t *str,uint32_t timeout);

/**
    @brief Проверка регистрации модуля в сети LTE

    @param [in] timeout Предельное время ожидания ответа радиомодуля
    @return Если модуль зарегистрирован в сети - 1, если не зарегистрирован либо в ходе запроса произошла ошибка - 0
*/
uint8_t AT_IsRegistered(uint32_t timeout);
/**
    @}
*/

/**
    @brief Включить или выключить использование модулем режима PSM

    @param [in] state 1 - включить использование PSM: модуль будет отключаться через время T3324 (устанавливается сетью); 0 - модуль будет активен постоянно.
    @return ненулевое значение свидетельствует о том, что команда выполнена успешно; ноль означает, что произошла ошибка.
*/
uint8_t AT_SwitchPSM(uint8_t state,uint32_t timeout);

void __AT_FSM_rearm(void);

#endif /* AT_CMD_SUPPORT_H_INCLUDED */
