#ifndef I2C_API_H_INCLUDED
#define I2C_API_H_INCLUDED

#include "stm32l1xx.h"

/**
    @ingroup interface_drivers
    @defgroup i2c_api Код поддержки обмена через I2C
    @{
*/

 /**
    @file i2c_api.h
    @author RedBees, LLC
    @copyright This file is distributed under the terms of the MIT license.
 */

///Максимальное количество тактов, которое может продолжаться ожидание реакции модуля I2C на команду (например, генерация условия START).
///Необходимо для исключения зависания контроллера в случае непредвиденного состояния конечного автомата модуля.
#define I2C_SAFETY_TIMEOUT      2000000UL

#ifndef NULL
#define NULL                    ((void *)0)
#endif

typedef enum { I2C_ERROR_NONE,I2C_ERROR_START_FAIL,I2C_ERROR_ADDR_FAIL,I2C_ERROR_READ_FAIL,I2C_ERROR_WRITE_FAIL } i2c_error_t;

/**
    @brief Выполняет настройку модуля I2C для работы на стандартной частоте SDA, равной 100 кГц.

    @warning Функция не включает тактирование модуля и не конфигурирует используемые порты. Эти действия должны быть сделаны отдельно, до ее вызова.

    @param [in] i2c_inst Указатель на модуль I2C.
    @param [in] sys_clk Значение тактовой частоты модуля (например, для I2C1 - тактирование шины APB1) в Герцах (например, 16 МГц = 16000000 Гц).

    @warning Для корректной работы модуля I2C его тактовая частота должна быть не менее 2 и не более 50 МГц. В зависимости от
    настроек тактирования контроллера это может привести к необходимости скорректировать делители тактирования для той шины, к которой подключен
    конкретный модуль I2C, настраиваемый с помощью этой функции.
*/
void init_i2c(I2C_TypeDef* i2c_inst,uint32_t sys_clk);

/**
    @brief Функция выполняет чтение регистра устройства I2C по правилам, общим для многих I2C-устройств.

    Многие I2C-устройства (в частности, термодатчик TMP75 и акселерометр LIS3DH) предоставляют доступ к своим внутренним регистрам следующим
    способом: после генерации состояния START ведущий адресует устройство в режиме записи согласно протоколу I2C и передает байт-индекс регистра,
    который требуется прочитать. После этого ведущий генерирует состояние повторного старта, адресует устройство в режиме чтения и далее
    выполняет чтение ранее адресованного регистра. После чтения доступ завершается состоянием STOP.
    Функция реализует описанный алгоритм доступа.

    @param [in] i2c_inst указатель на блок I2C
    @param [in] i2c_addr адрес устройства на шине I2C (семь бит, без бита чтение/запись)
    @param [in] pointer_byte индекс регистра устройства, из которого будет выполняться чтение
    @param [in] read_length количество байт, которое требуется прочесть
    @param [out] read_buffer указатель на массив, в который будет выполняться запись прочитанных данных

    @return код ошибки; при успешном завершении - I2C_ERROR_NONE
*/
i2c_error_t i2c_read_with_pointer(I2C_TypeDef* i2c_inst,uint8_t i2c_addr,uint8_t pointer_byte,uint8_t read_length,uint8_t* read_buffer);
/**
    @brief Функция выполняет запись регистра устройства I2C по правилам, общим для многих I2C-устройств.

    Многие I2C-устройства (в частности, термодатчик TMP75 и акселерометр LIS3DH) предоставляют возможность записи в свои регистры
    следующим способом: после генерации состояния START ведущий адресует устройство в режиме записи согласно протоколу I2C, после чего
    передает байт-индекс регистра, в который требуется выполнить запись. После этого ведущий передает данные и завершает доступ состоянием STOP.
    Функция реализует описанный алгоритм доступа.

    @param [in] i2c_inst указатель на блок I2C
    @param [in] i2c_addr адрес устройства на шине I2C (семь бит, без бита чтение/запись)
    @param [in] pointer_byte байт-индекс регистра, в который будет выполняться запись
    @param [in] write_length количество байт, которые требуется записать
    @param [in] write_buffer данные, которые требуется записать

    @return код ошибки; при успешном завершении - I2C_ERROR_NONE
*/
i2c_error_t i2c_write_with_pointer(I2C_TypeDef* i2c_inst,uint8_t i2c_addr,uint8_t pointer_byte,uint16_t write_length,uint8_t* write_buffer);

/**
    @}
*/

#endif /* I2C_API_H_INCLUDED */
